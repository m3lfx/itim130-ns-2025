https://drive.google.com/file/d/10MegpCzCiOVLoRRw0fjyDjOLrdQnXmCA/view?usp=drive_link

CRUD 
create read update delete

//INSERT

INSERT INTO table_name(col1, col2, coln,) VALUES('value1', 12, 5.00);

INSERT INTO items(item_id, name, cost_price, sell_price, supplier_name, quantity) VALUES(1, 'laptop', 100.00, 150.50, 'acer', 10)

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('mouse', 200.00, 350.50, 'acer', 24)

//SELECT

SELECT * FROM table_name; 

SELECT * FROM items;
SELECT name, cost_price FROM items; 

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('softdrinks', 50.00, 55, 'sprite', 20), 
('phone', 150.00, 155, 'apple', 40),
('keyboard', 200.00, 200.60, 'logitech', 30)  

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('', 100.00, NULL, 'ligo', 10)

99999.99
INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('projector', 100000, NULL, 'ligo', 10)

SELECT name, sell_price 
FROM items
ORDER BY sell_price DESC  ;

//column alias
SELECT name AS `item name` , sell_price AS 'selling price'
FROM items
ORDER BY sell_price DESC  ;

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('projector', 2000, 2500, 'acer', 10)

//DISTINCT
SELECT DISTINCT name FROM items; 

SELECT  DISTINCT name, cost_price FROM items; 

LIMIT
SELECT name AS `item name` , sell_price AS 'selling price'
FROM items
ORDER BY sell_price DESC
LIMIT 3

SELECT item_id, name AS `item name` , sell_price AS 'selling price'
FROM items
LIMIT 2,3

WHERE clause 

== <= >= <> != OR || And

fetch all items with selling price greater than 55 pesos
SELECT * 
FROM items
WHERE sell_price >= 155
ORDER BY name

SELECT item_id, name, sell_price 
FROM items
WHERE sell_price >= 155
ORDER BY name

fetch all items from supplier acer

SELECT item_id, name, supplier_name
FROM items 
WHERE  supplier_name != 'acer'
ORDER BY supplier_name DESC;

fetch all items with cost price of greater 10 but the selling price is less than 5000

SELECT name, cost_price, sell_price
FROM items
WHERE  cost_price > 10 AND sell_price < 2000

fetch all products from supplier ligo or acer

SELECT item_id, name, supplier_name
FROM items
WHERE (supplier_name = 'ligo' and supplier_name = 'acer') OR supplier_name = 'acer'
()
MDAS
relation
logical

INSERT INTO customers( first_name, last_name, address, city,  phone) VALUES('jenny','stones','27 Rowan Avenue','hightown','023 9876'), 
('Andrew','stones','52 The willows','lowtown','876 3527'), 
('Alex','Matthew','4 The Street','Nicetown', '010 4567'), ('Adrian','MAtthew','The Barn','Yuleville','487 3871'),
('Simon','Cozens','7 Shady Lane','Oahenham','514 5926'), 
('Neil','Matther','5 Pasture Lane','Nicetown','267 1232'), 
('Richard','stones','34 Holly Way','Bingham','342 5982'), 
('Ann','stones','34 Holly Way','Bingham','342 5982'), 
('Christine','Hickman','36 Queen Street','Histon','342 5432'), 
('Mike','Howard','86 Dysart Street','Tibsville','505 5482'), 
('Dave','Jones','54 Vale Rise','Bingham','342 8264'), 
('Richard','Neil','42 Thached Way','Winersbay','505 6482'), 
('Laura','Hendy','73 MArgaritta Way','Oxbridge','821 2335'), 
('Bill','O\Neil','2 Beamer Street','Welltown','435 1234'), 
('David','Hudson','4 The Square','Milltown','961 4526');

fetch all customer from nicetown or from bingham 

SELECT * 
FROM customers
WHERE city = 'nicetown' or city = 'bingham' or city = 'milltown'

IN clause
SELECT * 
FROM customers
WHERE city IN ('nicetown', 'bingham', 'milltown')

BINARY
SELECT * 
FROM customers
WHERE BINARY city = 'bingham'

LIKE

find customers last name that starts with 's'

SELECT * 
FROM customers
WHERE last_name LIKE 's%'

find customers last name that ends with an 's'

SELECT * 
FROM customers
WHERE last_name LIKE '%s'

find customers last name that contains an 's'

SELECT * 
FROM customers
WHERE last_name LIKE '%s%'

find customers that has exactly 4 characters in their first name

SELECT * 
FROM customers
WHERE first_name LIKE '____'

fetch items that has 150 in their selling price
SELECT * 
FROM items
WHERE sell_price LIKE '150%'

fetch all customer with 'on' as last characters on their last name
SELECT * 
FROM customers
WHERE last_name LIKE '%on '

fetch all customers with an 's' on first name and their city has an 'e' 
SELECT * 
FROM customers
WHERE BINARY last_name LIKE '%S%' or city LIKE '%e%'

SELECT * 
FROM customers
WHERE  last_name LIKE '%S%'

order data
INSERT INTO orders (date_ordered, date_delivered, status, customer_id)
VALUES(now(), NULL, 'processing', 1 )

orderline

INSERT INTO orderline(order_id, item_id, quantity)
VALUES(1, 1, 1),(1,2,2)

INSERT INTO orderline(order_id, item_id, quantity)
VALUES(2, 5, 1)

INSERT INTO orderline(order_id, item_id, quantity)
VALUES(3, 3, 5), (3, 4, 10), (3,5,8) 

inserting child row without parent
INSERT INTO orders (date_ordered, date_delivered, status, customer_id)
VALUES(now(), NULL, 'processing', 100 )

INSERT INTO orderline(order_id, item_id, quantity)
VALUES(3, 100, 5)

enum insert value
INSERT INTO orders (date_ordered, date_delivered, status, customer_id)
VALUES(now(), NULL, 'pending', 3 )

LAST INSERT ID Function
INSERT INTO orders (date_ordered, date_delivered, status, customer_id)
VALUES(now(), NULL, 'processing', 6 );
INSERT INTO orderline(order_id, item_id, quantity)
VALUES(LAST_INSERT_ID(), 3, 10);
INSERT INTO orderline(order_id, item_id, quantity) VALUES (LAST_INSERT_ID(), 6, 4); 

UPDATE
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

UPDATE items
SET sell_price = 150
WHERE item_id = 6

UPDATE items
SET sell_price = 150, name = 'shoes' 
WHERE item_id = 7

UPDATE items
SET sell_price = sell_price + 10  

UPDATE items
SET quantity = 10
WHERE supplier_name = "acer"

delete
DELETE FROM table_name WHERE condition

DELETE FROM items WHERE item_id = 8

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('ps5', 2000.00, 25000.50, 'sony', 20)

DELETE FROM orderline WHERE item_id = 1;
delete from items where item_id = 1;

INSERT into stock(quantity) VALUES(2), (2), (4)

CREATE TABLE stock(
    item_id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
	quantity    int NOT NULL
);

BETWEEN
SELECT * FROM customers 
WHERE customer_id BETWEEN 9 AND 5

fetch all orders for the month of May 
SELECT * 
FROM orders
WHERE date_ordered >= '2025-06-01' AND date_ordered <= '2025-06-30'


UPDATE orders SET date_ordered = '2025-06-09' WHERE order_id = 1

SELECT * 
FROM orders
WHERE date_ordered BETWEEN '2025-06-01' AND '2025-06-30'

SELECT month('2025-06-01')
SELECT monthname('2025-06-01')

SELECT order_id, monthname(date_ordered)
FROM orders;

SELECT order_id, weekday(date_ordered)
FROM orders;

SELECT date_format(now(), '%a %D of %M %Y')

SELECT order_id, date_format(date_ordered, '%a %D of %M %Y')
FROM orders;


DATE_ADD

SELECT date_add(now(), INTERVAL 10 year)

update date date_delivered order 1

UPDATE orders SET date_delivered = date_add(date_ordered, INTERVAL 365 DAY) 
WHERE order_id = 6;

UPDATE orders SET date_delivered = date_add(date_ordered, INTERVAL 15 DAY) 
WHERE order_id IN (2, 3, 5, 7);


fetch customer and their orders 
table JOIN

SELECT c.customer_id, o.order_id, c.last_name, o.date_ordered, o.status
FROM customers c, orders o
WHERE c.customer_id = o.customer_id

fetch specific order by last name
SELECT c.customer_id, o.order_id, c.last_name, o.date_ordered, o.status
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND c.last_name = 'hudson'

fetch all orders from nicetown

SELECT c.customer_id, o.order_id, c.last_name, o.date_ordered, o.status, c.city
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND c.city = 'nicetown'

fetch all orders and their customer for the month of may

SELECT c.customer_id, o.order_id, c.last_name, monthname(o.date_ordered), o.status, c.city
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'

SELECT c.customer_id, o.order_id, c.last_name, monthname(o.date_ordered), o.status, c.city
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND month(o.date_ordered) = 6

fetch all customer and the items they ordered
SELECT c.customer_id, o.order_id, c.last_name, o.status, ol.item_id, i.name
FROM customers c, orders o, orderline ol, items i
WHERE c.customer_id = o.customer_id
AND o.order_id = ol.order_id
AND i.item_id = ol.item_id
AND c.last_name = 'hudson'


fetch all customers from nicetown or bingham and the items they ordered
SELECT o.order_id, c.last_name, c.city, date_format(date_ordered, '%a %D of %M %Y'), i.name
FROM customers c, orders o, orderline ol, items i 
WHERE c.customer_id = o.customer_id
AND o.order_id = ol.order_id
AND i.item_id = ol.item_id
AND c.city IN ('nicetown', 'bingham')










fetch all items that were bought on may 2025.

what items are being bought in bulk (10 or more items)

what items that were delivered on may to milltown,

top 1 selling item from milltown for the month of may


