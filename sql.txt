https://drive.google.com/file/d/10MegpCzCiOVLoRRw0fjyDjOLrdQnXmCA/view?usp=drive_link

CRUD 
create read update delete

//INSERT

INSERT INTO table_name(col1, col2, coln,) VALUES('value1', 12, 5.00);

INSERT INTO items(item_id, name, cost_price, sell_price, supplier_name, quantity) VALUES(1, 'laptop', 100.00, 150.50, 'acer', 10)

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('mouse', 200.00, 350.50, 'acer', 24)

//SELECT

SELECT * FROM table_name; 

SELECT * FROM items;
SELECT name, cost_price FROM items; 

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('softdrinks', 50.00, 55, 'sprite', 20), 
('phone', 150.00, 155, 'apple', 40),
('keyboard', 200.00, 200.60, 'logitech', 30)  

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('', 100.00, NULL, 'ligo', 10)

99999.99
INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('projector', 100000, NULL, 'ligo', 10)

SELECT name, sell_price 
FROM items
ORDER BY sell_price DESC  ;

//column alias
SELECT name AS `item name` , sell_price AS 'selling price'
FROM items
ORDER BY sell_price DESC  ;

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('projector', 2000, 2500, 'acer', 10)

//DISTINCT
SELECT DISTINCT name FROM items; 

SELECT  DISTINCT name, cost_price FROM items; 

LIMIT
SELECT name AS `item name` , sell_price AS 'selling price'
FROM items
ORDER BY sell_price DESC
LIMIT 3

SELECT item_id, name AS `item name` , sell_price AS 'selling price'
FROM items
LIMIT 2,3

WHERE clause 

== <= >= <> != OR || And

fetch all items with selling price greater than 55 pesos
SELECT * 
FROM items
WHERE sell_price >= 155
ORDER BY name

SELECT item_id, name, sell_price 
FROM items
WHERE sell_price >= 155
ORDER BY name

fetch all items from supplier acer

SELECT item_id, name, supplier_name
FROM items 
WHERE  supplier_name != 'acer'
ORDER BY supplier_name DESC;

fetch all items with cost price of greater 10 but the selling price is less than 5000

SELECT name, cost_price, sell_price
FROM items
WHERE  cost_price > 10 AND sell_price < 2000

fetch all products from supplier ligo or acer

SELECT item_id, name, supplier_name
FROM items
WHERE (supplier_name = 'ligo' and supplier_name = 'acer') OR supplier_name = 'acer'
()
MDAS
relation
logical

INSERT INTO customers( first_name, last_name, address, city,  phone) VALUES('jenny','stones','27 Rowan Avenue','hightown','023 9876'), 
('Andrew','stones','52 The willows','lowtown','876 3527'), 
('Alex','Matthew','4 The Street','Nicetown', '010 4567'), ('Adrian','MAtthew','The Barn','Yuleville','487 3871'),
('Simon','Cozens','7 Shady Lane','Oahenham','514 5926'), 
('Neil','Matther','5 Pasture Lane','Nicetown','267 1232'), 
('Richard','stones','34 Holly Way','Bingham','342 5982'), 
('Ann','stones','34 Holly Way','Bingham','342 5982'), 
('Christine','Hickman','36 Queen Street','Histon','342 5432'), 
('Mike','Howard','86 Dysart Street','Tibsville','505 5482'), 
('Dave','Jones','54 Vale Rise','Bingham','342 8264'), 
('Richard','Neil','42 Thached Way','Winersbay','505 6482'), 
('Laura','Hendy','73 MArgaritta Way','Oxbridge','821 2335'), 
('Bill','O\Neil','2 Beamer Street','Welltown','435 1234'), 
('David','Hudson','4 The Square','Milltown','961 4526');

fetch all customer from nicetown or from bingham 

SELECT * 
FROM customers
WHERE city = 'nicetown' or city = 'bingham' or city = 'milltown'

IN clause
SELECT * 
FROM customers
WHERE city IN ('nicetown', 'bingham', 'milltown')

BINARY
SELECT * 
FROM customers
WHERE BINARY city = 'bingham'

LIKE

find customers last name that starts with 's'

SELECT * 
FROM customers
WHERE last_name LIKE 's%'

find customers last name that ends with an 's'

SELECT * 
FROM customers
WHERE last_name LIKE '%s'

find customers last name that contains an 's'

SELECT * 
FROM customers
WHERE last_name LIKE '%s%'

find customers that has exactly 4 characters in their first name

SELECT * 
FROM customers
WHERE first_name LIKE '____'

fetch items that has 150 in their selling price
SELECT * 
FROM items
WHERE sell_price LIKE '150%'

fetch all customer with 'on' as last characters on their last name
SELECT * 
FROM customers
WHERE last_name LIKE '%on '

fetch all customers with an 's' on first name and their city has an 'e' 
SELECT * 
FROM customers
WHERE BINARY last_name LIKE '%S%' or city LIKE '%e%'

SELECT * 
FROM customers
WHERE  last_name LIKE '%S%'

order data
INSERT INTO orders (date_ordered, date_delivered, status, customer_id)
VALUES(now(), NULL, 'processing', 1 )

orderline

INSERT INTO orderline(order_id, item_id, quantity)
VALUES(1, 1, 1),(1,2,2)

INSERT INTO orderline(order_id, item_id, quantity)
VALUES(2, 5, 1)

INSERT INTO orderline(order_id, item_id, quantity)
VALUES(3, 3, 5), (3, 4, 10), (3,5,8) 

inserting child row without parent
INSERT INTO orders (date_ordered, date_delivered, status, customer_id)
VALUES(now(), NULL, 'processing', 100 )

INSERT INTO orderline(order_id, item_id, quantity)
VALUES(3, 100, 5)

enum insert value
INSERT INTO orders (date_ordered, date_delivered, status, customer_id)
VALUES(now(), NULL, 'pending', 3 )

LAST INSERT ID Function
INSERT INTO orders (date_ordered, date_delivered, status, customer_id)
VALUES(now(), NULL, 'processing', 6 );
INSERT INTO orderline(order_id, item_id, quantity)
VALUES(LAST_INSERT_ID(), 3, 10);
INSERT INTO orderline(order_id, item_id, quantity) VALUES (LAST_INSERT_ID(), 6, 4); 

UPDATE
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

UPDATE items
SET sell_price = 150
WHERE item_id = 6

UPDATE items
SET sell_price = 150, name = 'shoes' 
WHERE item_id = 7

UPDATE items
SET sell_price = sell_price + 10  

UPDATE items
SET quantity = 10
WHERE supplier_name = "acer"

delete
DELETE FROM table_name WHERE condition

DELETE FROM items WHERE item_id = 8

INSERT INTO items(name, cost_price, sell_price, supplier_name, quantity) VALUES('ps5', 2000.00, 25000.50, 'sony', 20)

DELETE FROM orderline WHERE item_id = 1;
delete from items where item_id = 1;

INSERT into stock(quantity) VALUES(2), (2), (4)

CREATE TABLE stock(
    item_id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
	quantity    int NOT NULL
);

BETWEEN
SELECT * FROM customers 
WHERE customer_id BETWEEN 9 AND 5

fetch all orders for the month of May 
SELECT * 
FROM orders
WHERE date_ordered >= '2025-06-01' AND date_ordered <= '2025-06-30'


UPDATE orders SET date_ordered = '2025-06-09' WHERE order_id = 1

SELECT * 
FROM orders
WHERE date_ordered BETWEEN '2025-06-01' AND '2025-06-30'

SELECT month('2025-06-01')
SELECT monthname('2025-06-01')

SELECT order_id, monthname(date_ordered)
FROM orders;

SELECT order_id, weekday(date_ordered)
FROM orders;

SELECT date_format(now(), '%a %D of %M %Y')

SELECT order_id, date_format(date_ordered, '%a %D of %M %Y')
FROM orders;


DATE_ADD

SELECT date_add(now(), INTERVAL 10 year)

update date date_delivered order 1

UPDATE orders SET date_delivered = date_add(date_ordered, INTERVAL 365 DAY) 
WHERE order_id = 6;

UPDATE orders SET date_delivered = date_add(date_ordered, INTERVAL 15 DAY) 
WHERE order_id IN (2, 3, 5, 7);


fetch customer and their orders 
table JOIN

SELECT c.customer_id, o.order_id, c.last_name, o.date_ordered, o.status
FROM customers c, orders o
WHERE c.customer_id = o.customer_id

fetch specific order by last name
SELECT c.customer_id, o.order_id, c.last_name, o.date_ordered, o.status
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND c.last_name = 'hudson'

fetch all orders from nicetown

SELECT c.customer_id, o.order_id, c.last_name, o.date_ordered, o.status, c.city
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND c.city = 'nicetown'

fetch all orders and their customer for the month of may

SELECT c.customer_id, o.order_id, c.last_name, monthname(o.date_ordered), o.status, c.city
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'

SELECT c.customer_id, o.order_id, c.last_name, monthname(o.date_ordered), o.status, c.city
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND month(o.date_ordered) = 6

fetch all customer and the items they ordered
SELECT c.customer_id, o.order_id, c.last_name, o.status, ol.item_id, i.name
FROM customers c, orders o, orderline ol, items i
WHERE c.customer_id = o.customer_id
AND o.order_id = ol.order_id
AND i.item_id = ol.item_id
AND c.last_name = 'hudson'


fetch all customers from nicetown or bingham and the items they ordered
SELECT o.order_id, c.last_name, c.city, date_format(date_ordered, '%a %D of %M %Y'), i.name
FROM customers c, orders o, orderline ol, items i 
WHERE c.customer_id = o.customer_id
AND o.order_id = ol.order_id
AND i.item_id = ol.item_id
AND c.city IN ('nicetown', 'bingham')

//INNER JOIN

SELECT o.order_id, c.last_name, c.city, date_format(date_ordered, '%a %D of %M %Y'), i.name
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id) 
INNER JOIN orderline ol ON (o.order_id = ol.order_id)
INNER JOIN  items i ON (i.item_id = ol.item_id)
WHERE c.city IN ('nicetown', 'bingham')

fetch all items that were bought on may 2025.

SELECT i.name, o.date_ordered, ol.quantity 
FROM orders o INNER JOIN orderline ol ON (o.order_id = ol.order_id)
INNER JOIN items i ON (i.item_id = ol.item_id)
WHERE o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'
ORDER BY ol.quantity

SELECT i.name, o.date_ordered, ol.quantity 
FROM orders o INNER JOIN orderline ol ON (o.order_id = ol.order_id)
INNER JOIN items i ON (i.item_id = ol.item_id)
WHERE monthname(o.date_ordered) = 'may'
ORDER BY ol.quantity

what items are being bought in bulk (10 or more items)
SELECT i.name, o.date_ordered, ol.quantity 
FROM orders o INNER JOIN orderline ol ON (o.order_id = ol.order_id)
INNER JOIN items i ON (i.item_id = ol.item_id)
WHERE ol.quantity >= 10

what items that were delivered on may to milltown,
SELECT   c.city, date_format(date_ordered, '%a %D of %M %Y'), i.name, ol.quantity
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id) 
INNER JOIN orderline ol ON (o.order_id = ol.order_id)
INNER JOIN  items i ON (i.item_id = ol.item_id)
WHERE o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'
AND c.city = 'milltown'




top 1 selling item from nicetown for the month of may

SELECT   c.city, date_format(date_ordered, '%a %D of %M %Y'), i.name, ol.quantity
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id) 
INNER JOIN orderline ol ON (o.order_id = ol.order_id)
INNER JOIN  items i ON (i.item_id = ol.item_id)
WHERE o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'
AND c.city = 'nicetown'
ORDER BY ol.quantity DESC
LIMIT 1

UPDATE items SET supplier_name = NULL WHERE item_id = 7
AGGREGATE functions

SELECT count(*) FROM customers;

SELECT count(name) FROM items;

SELECT count(supplier_name) FROM items;

SELECT max(quantity) FROM orderline

SELECT i.name, max(ol.quantity) AS 'top selling' FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)

fetch an item that is in critical stock
SELECT name, min(quantity) from items

total cost_price 
SELECT sum(cost_price) FROM items;
average 

SELECT avg(sell_price) FROM items;

SELECT min(date_delivered) from orders;
SELECT max(date_delivered) from orders;

get the total payment of one order 
SELECT o.order_id, sum(i.sell_price * ol.quantity) AS total
FROM orders o INNER JOIN orderline ol ON(o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
WHERE o.order_id = 3

how many items were sold on month of may 

SELECT  monthname(o.date_ordered), sum(ol.quantity) as 'total items sold'
FROM orders o INNER JOIN orderline ol ON (o.order_id = ol.order_id) 
WHERE o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'

calculate profit for month of may
SELECT monthname(o.date_ordered), sum(i.sell_price * ol.quantity) AS total
FROM orders o INNER JOIN orderline ol ON(o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
WHERE o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'

GROUP BY clause

count number of customers per city
SELECT city, count(*) 
FROM customers 
GROUP BY city

count the number of orders for each month for this year

SELECT monthname(date_ordered), count(*) 
FROM orders 
WHERE date_ordered BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY date_ordered

get the total quantity sold for each item.
SELECT ol.item_id, i.name, sum(ol.quantity) as total
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)
GROUP BY ol.item_id

get the total for each order 
SELECT o.order_id, sum(i.sell_price * ol.quantity) AS total, o.date_ordered
FROM orders o INNER JOIN orderline ol ON(o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
GROUP BY o.order_id

get the customer name and total payment
SELECT o.order_id, concat(c.first_name, " ", c.last_name),  sum(i.sell_price * ol.quantity) AS total, o.date_ordered
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id) INNER JOIN orderline ol ON(o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
GROUP BY o.order_id

how much did each customer spend on our store
SELECT c.customer_id, concat(c.first_name, " ", c.last_name),  sum(i.sell_price * ol.quantity) AS total, o.date_ordered
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id) INNER JOIN orderline ol ON(o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
GROUP by c.customer_id

get the profit for each product
SELECT i.item_id, i.name, sum(i.sell_price * ol.quantity) AS total
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)
GROUP BY i.item_id

top 3 best sellers 
SELECT i.item_id, i.name, sum(i.sell_price * ol.quantity) AS total
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)
GROUP BY i.item_id
ORDER BY total DESC
LIMIT 3

get the profit for each city
SELECT  c.city, sum(i.sell_price * ol.quantity) AS total
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id) INNER JOIN orderline ol ON(o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
GROUP BY c.city WITH ROLLUP
ORDER BY total DESC

get the profit for each month
SELECT monthname(o.date_ordered), sum(i.sell_price * ol.quantity) AS total
FROM orders o INNER JOIN orderline ol ON(o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
WHERE o.date_ordered BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY month(o.date_ordered)

SELECT monthname(o.date_delivered), sum(i.sell_price * ol.quantity) AS total
FROM orders o INNER JOIN orderline ol ON(o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
WHERE o.date_delivered BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY month(o.date_delivered)

Select last_name from customers where binary last_name REGEXP "^H.*";
Select last_name from customers where binary last_name REGEXP ".*on.*";
Select last_name from customers where binary last_name REGEXP ".*on.+";
Select last_name from customers where binary last_name REGEXP ".*[on].*";
Select last_name from customers where binary last_name REGEXP "^[^SJH]";

Select last_name from customers where binary last_name REGEXP "^[A-Z0-9_]";

Select strcmp('foo', 'foo');
Select strcmp('foo', 'FOO');
Select strcmp('foo', binary 'FOO');
Select strcmp('foo', 'bar');
Select ceiling(2.2), floor(2.4),round(2.2)
Select name, MID(name,2,4), 
UPPER(name) 
FROM items where item_id = 6;

Select ASCII('A'),
Char(65,66,67),
Concat('hello',0x20,0x57, 'orld');


CREATE TABLE testcolcons (
  Colnotnull INT NOT NULL PRIMARY KEY, 
  Colprikey INT NOT NULL PRIMARY KEY,
  Coldefault  INT DEFAULT 42);

INSERT INTO testcolcons(colnotnull, colprikey,coldefault) values(1,1,1);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault) values(2,2,NULL);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault) values(NULL,3,NULL);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault) values(3,2,NULL);
INSERT INTO testcolcons(colnotnull, colprikey) values(3,3);

Create table ttconst (
  mykey1 INT, 
  mykey2 INT NOT NULL, 
  mystring varchar(15) NOT NULL,
  CONSTRAINT cs1 UNIQUE(mykey1), 
  CONSTRAINT cs2 PRIMARY KEY (mykey2,mystring));

  Insert into ttconst values(1,2, 'Amy Jones');
Insert into ttconst values(1,2, 'Dave jones');
Insert into ttconst values(2,2, 'Dave jones');
Insert into ttconst values(3,2, 'Amy Jones');

ALTER TABLE table-name ADD COLUMN column-name column-type
[first | after column name]
ALTER TABLE table-name DROP COLUMN  column-name
ALTER TABLE table-name CHANGE COLUMN column-name new-name new-type
ALTER TABLE old-table-name RENAME TO new-table-name
ALTER TABLE ADD PRIMARY KEY (column list)
ALTER TABLE DROP PRIMARY KEY

ALTER TABLE customers ADD COLUMN zipcode varchar(10) AFTER phone;
ALTER TABLE customers CHANGE COLUMN zipcode zipcode2 char(15);

ALTER TABLE customers CHANGE COLUMN first_name first_name char(32) NOT NULL ;
ALTER TABLE customers ADD PRIMARY KEY (fname,lname);

CREATE TABLE orderinfo (
  orderinfo_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY, 
  customer_id INT NOT NULL, 
  date_placed date NOT NULL, 
  date_shipped date, 
  shipping decimal(7,2),
  INDEX(customer_id),
	CONSTRAINT orderinfo_customer_id_fk FOREIGN KEY (customer_id) 
  REFERENCES customers(customer_id)
);

LOAD DATA [LOCAL] INFILE filename INTO TABLE tablename [FIELDS[TERMINATED BY 'char'] [ENCLOSED BY 'char'] [ESCAPED BY 'char']] [ LINES TERMINATED BY 'char']
	IGNORE n LINES ] [column1, column2,…

LOAD DATA LOCAL INFILE 'd:/itim130-ns-2025/cust.txt' INTO TABLE customers FIELDS TERMINATED BY ',' (first_name, last_name, address, city, phone, zipcode2);

mysqlimport  –-local –p –-user=root --fields-terminated-by=, --columns=first_name,last_name,address,city,phone,zipcode2 db_sales_ns_2025  d:/itim130-ns-2025/customers.txt 

Imports MySql.Data.MySqlClient
Public Class Form1
    Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;Database=db_sales_s_2025;User=root;Password=;")
    'Public dbconn As New MySqlConnection
    Public sql As String
    Public dbcomm As MySqlCommand
    Public dbread As MySqlDataReader
    Public DataAdapter1 As MySqlDataAdapter
    Public ds As DataSet
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
         Try
            conn.Open()
            sql = "SELECT * FROM customers ORDER BY customer_id DESC"

            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "customers")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "customers"


        Catch ex As Exception
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try
        conn.Close()
    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim customer_id As Integer
         Try
            conn.Open()
            customer_id = Val(TextBox1.Text)
            sql = "SELECT * FROM customers WHERE customer_id = " & customer_id
            Label1.Text = sql
            dbcomm = New MySqlCommand(sql, conn)
            dbread = dbcomm.ExecuteReader()
            dbread.Read()

            TextBox2.Text = dbread("first_name")
            TextBox3.Text = dbread("last_name")
            TextBox4.Text = dbread("address")
            TextBox5.Text = dbread("city")
            TextBox6.Text = dbread("phone")
            TextBox7.Text = dbread("zipcode2")

        Catch ex As MysqlException
            MsgBox(ex.Message)
        End Try
        conn.Close()
        
    End Sub

    Private Sub TextBox1_TextChanged(sender As Object, e As EventArgs) Handles TextBox1.TextChanged

    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        Dim title = TextBox2.Text
        Dim firstName = TextBox3.Text
        Dim lastName = TextBox4.Text
        Dim address = TextBox5.Text
        Dim town = TextBox6.Text
        Dim zip = TextBox7.Text
        Dim phone = TextBox8.Text
        Try
            conn.Open()
                sql = $"INSERT INTO customers (first_name, last_name, address, city, phone, zipcode2) VALUES ('{firstName}','{lastName}', '{address}', '{city}', '{phone}', '{zip}')"
            sql = "INSERT INTO customer (title, fname, lname, addressline, town, zipcode, phone) VALUES ('" & title & "','" & firstName & "','" & lastName & "','" & address & "','" & town & "','" & zip & "','" & phone & "')"
            dbcomm = New MySqlCommand(sql, conn)
            Dim i As Integer = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
        Catch ex As MySqlException
            MsgBox("customer not created")
            conn.Close()
        End Try
        Label1.Text = sql
        conn.Close()
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Dim customerId = Val(TextBox1.Text)
        Dim title = TextBox2.Text
        Dim firstName = TextBox3.Text
        Dim lastName = TextBox4.Text
        Dim address = TextBox5.Text
        Dim town = TextBox6.Text
        Dim zip = TextBox7.Text
        Dim phone = TextBox8.Text
        Try
            conn.Open()
            sql = $"UPDATE customer SET title = '{title}', lname = '{lastName}', fname = '{firstName}', addressline = '{address}', town = '{town}', zipcode = '{zip}', phone= '{phone}' WHERE customer_id = {customerId}"
            Label1.Text = sql
            dbcomm = New MySqlCommand(sql, conn)
            Dim i As Integer = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record updated")
            Else
                MsgBox("record not saved")

            End If

        Catch ex As Exception

        End Try
        conn.Close()

    End Sub

    Private Sub Button4_Click(sender As Object, e As EventArgs) Handles Button4.Click
        Try
            conn.Open()
            Dim id As Integer = InputBox("enter customer id to be deleted", "delete record")
            Dim ans = MessageBox.Show("do you want to delete this record?", "record deleted", MessageBoxButtons.YesNoCancel)
            If ans = DialogResult.Yes Then
                sql = $"DELETE FROM customer WHERE customer_id = {id}"
                dbcomm = New MySqlCommand(sql, conn)
                Dim i As Integer = dbcomm.ExecuteNonQuery

                If (i > 0) Then
                    MsgBox("record deleted")
                Else
                    MsgBox("record not deleted")

                End If
            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
        End Try
        conn.close()
    End Sub
End Class

//items crud 
drop quantity column on items
ALTER TABLE items DROP COLUMN quantity
CREATE TABLE stocks (
    item_id INT NOT NULL PRIMARY KEY,
    quantity INT NOT NULL DEFAULT 0
);

Private Sub Form2_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Try
            conn.Open()
            sql = "SELECT * FROM items ORDER BY item_id DESC"

            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "items")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "items"


        Catch ex As Exception
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try
        conn.Close()
    End Sub
Try
            conn.Open()
            sql = "SELECT i.item_id AS 'id', i.name AS name, i.cost_price AS cost, i.sell_price as `SELling price`, s.quantity FROM items i INNER  JOIN stocks s ON (i.item_id = s.item_id) ORDER BY i.item_id DESC"
            sql = "SELECT i.item_id, i.description, i.cost_price, i.sell_price, s.quantity FROM item i LEFT OUTER JOIN stock s ON i.item_id = s.item_id ORDER BY i.item_id DESC"
            dbcomm = New MySqlCommand(sql, conn)
            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "item")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "item"
        Catch ex As MySqlException
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)
            conn.Close()

        End Try

        conn.Close()

 Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim i As Integer = 0
        Dim description As String = TextBox1.Text
        Dim costPrice As Decimal = TextBox2.Text
        Dim sellPrice As Decimal = TextBox3.Text
        Dim quantity As Integer = NumericUpDown1.Value

        Try
            conn.Open()
            sql = $"INSERT INTO item (description, cost_price, sell_price) VALUES('{description}', {costPrice}, {sellPrice})"
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
            sql = $"INSERT INTO stock (item_id, quantity) VALUES(last_insert_id(), {quantity})"
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
        conn.Close()

Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim i As Integer = 0
        Dim description As String = TextBox1.Text
        Dim costPrice As Decimal = TextBox2.Text
        Dim sellPrice As Decimal = TextBox3.Text
        Dim quantity As Integer = NumericUpDown1.Value

        Try
            conn.Open()
            sql = $"INSERT INTO item (description, cost_price, sell_price) VALUES('{description}', {costPrice}, {sellPrice})"
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
            sql = $"INSERT INTO stock (item_id, quantity) VALUES(last_insert_id(), {quantity})"
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
        conn.Close()
Private Sub TextBox4_TextChanged(sender As Object, e As EventArgs) Handles TextBox4.TextChanged
        Dim itemId = Val(TextBox4.Text)

        Try
            conn.Open()
            sql = $"SELECT i.item_id AS `item id`, i.description, i.cost_price, i.sell_price, s.quantity FROM item i INNER JOIN stock s ON i.item_id = s.item_id WHERE i.item_id = {itemId}"
            dbcomm = New MySqlCommand(sql, conn)
            dbread = dbcomm.ExecuteReader()
            dbread.Read()
            TextBox1.Text = dbread("description")
            TextBox2.Text = dbread("cost_price")
            TextBox3.Text = dbread("sell_price")
            NumericUpDown1.Value = dbread("quantity")
            TextBox7.Text = dbread("item id")

        Catch ex As MySqlException
            MsgBox(ex.Message)
            conn.Close()

        End Try
        conn.Close()
    End Sub

  Private Sub TextBox5_TextChanged(sender As Object, e As EventArgs) Handles TextBox5.TextChanged
        Dim description As String = TextBox5.Text
        Try
            conn.Open()
            sql = "SELECT i.item_id, i.description, i.cost_price, i.sell_price, s.quantity FROM item i INNER JOIN stock s ON i.item_id = s.item_id WHERE i.description LIKE '%{description}%'"
            dbcomm = New MySqlCommand(sql, conn)
            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "item")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "item"
        Catch ex As MySqlException
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try

        conn.Close()
    End Sub

    Private Sub TextBox6_TextChanged(sender As Object, e As EventArgs) Handles TextBox6.TextChanged
        Dim description As String = TextBox6.Text
        Try
            conn.Open()
            sql = "SELECT i.item_id, i.description, i.cost_price, i.sell_price, s.quantity FROM item i INNER JOIN stock s ON i.item_id = s.item_id WHERE i.description LIKE '%{description}%'"
            dbcomm = New MySqlCommand(sql, conn)
            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "search_item")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "search_item"
        Catch ex As MySqlException
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try

        conn.Close()
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Dim itemId = Val(TextBox7.Text)
        Dim description = TextBox1.Text
        Dim costPrice = TextBox2.Text
        Dim sellPrice = TextBox3.Text
        Dim quantity = NumericUpDown1.Value
        Dim i As Integer = 0

        Try
            conn.Open()
            sql = $"UPDATE item SET description = '{description}', cost_price = {costPrice}, sell_price = {sellPrice} WHERE item_id = {itemId} "

            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record updated")
            Else
                MsgBox("record not saved")

            End If

            sql = $"UPDATE stock SET quantity = {quantity}  WHERE item_id = {itemId} "

            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record updated")
            Else
                MsgBox("record not saved")

            End If


        Catch ex As MySqlException
            MsgBox(ex.Message)
        End Try
        conn.Close()
    End Sub

    Private Sub Button4_Click(sender As Object, e As EventArgs) Handles Button4.Click
        Dim itemId = Val(TextBox7.Text)
        Dim i As Integer
        Try
            conn.Open()

            Dim ans = MessageBox.Show("do you want to delete this record?", "record deleted", MessageBoxButtons.YesNoCancel)
            If ans = DialogResult.Yes Then
                sql = $"DELETE FROM stock WHERE item_id = {itemId}"
                dbcomm = New MySqlCommand(sql, conn)
                i = dbcomm.ExecuteNonQuery

                If (i > 0) Then
                    MsgBox("stock deleted")
                Else
                    MsgBox("stock not deleted")

                End If
                sql = $"DELETE FROM item WHERE item_id = {itemId}"
                dbcomm = New MySqlCommand(sql, conn)
                i = dbcomm.ExecuteNonQuery

                If (i > 0) Then
                    MsgBox("record deleted")
                Else
                    MsgBox("record not deleted")

                End If
            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
            conn.Close()

        End Try
        conn.Close()

CREATE TABLE stocks(
    item_id INT NOT NULL PRIMARY KEY,
    quantity INT NOT NULL DEFAULT 0,
    INDEX(item_id),
    CONSTRAINT stock_item_id_fk FOREIGN KEY (item_id) REFERENCES items(item_id)
)
ALTER table items DROP COLUMN quantity
INSERT INTO items(name, cost_price, sell_price, supplier_name)
VALUES('foo', 50.50, 65.00,  'bar');
INSERT INTO stocks(item_id, quantity) VALUES(LAST_INSERT_ID(), 10);
INSERT INTO stocks(item_id, quantity) VALUES(2, 10),(3,5),(4,6),(5,9),(6,10),(7,15),(10,87)

 Try
            conn.Open()
            'sql = "SELECT * FROM items ORDER BY item_id DESC"
            sql = "SELECT i.item_id, i.name AS 'product name', i.cost_price AS cost, i.sell_price AS 'selling price', s.quantity FROM items i INNER JOIN stocks s ON (i.item_id = s.item_id) 
ORDER BY i.item_id DESC"

            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "items")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "items"


        Catch ex As Exception
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try
        conn.Close()
    End Sub

    INSERT INTO items(name, cost_price, sell_price, supplier_name)
VALUES('watch', 100, 200,  'casio');
 INSERT INTO items(name, cost_price, sell_price, supplier_name)
VALUES('calculator', 100, 200,  'casio');

Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Try
            conn.Open()
            sql = $"INSERT INTO items (name, cost_price, sell_price, supplier_name) VALUES('{TextBox1.Text}', {Convert.ToDecimal(TextBox2.Text)}, {Convert.ToDecimal(TextBox3.Text)}, '{TextBox4.Text}')"
            Label1.Text = sql
            dbcomm = New MySqlCommand(sql, conn)
            Dim i As Integer = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If

            sql = $"INSERT INTO stocks (item_id, quantity) VALUES(LAST_INSERT_ID(), {Val(NumericUpDown1.Value)} )"
            Label1.Text = sql
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If

        Catch ex As MySqlException
            MsgBox(ex.Message)
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
        conn.Close()

    End Sub






